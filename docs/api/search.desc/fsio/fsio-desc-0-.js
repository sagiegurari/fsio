searchState.loadedDescShard("fsio", 0, "fsio\ndirectory\nerror\nfile\npath\ntypes\nCreates the directory (and if needed the parent …\nCreates the parent directory (and if needed the parent …\nDeletes the directory and any child file/directory.\nHolds the error information\nIO error type\nNot a file error type\nPath already exist error type\nSystem time error type\nFormats the error using the given formatter.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppends (or creates) and writes the raw data to the …\nAppends (or creates) and writes the text to the requested …\nDeletes the requested file. If the file does not exist, …\nDeletes the requested file. If the file does not exist, …\nEnsures the provided path leads to an existing file. If …\nOverwrites or appends the requested file and triggers the …\nReads the requested file and returns its content.\nReads the requested text file and returns its content.\nCreates and writes the raw data to the requested file path.\nCreates and writes the text to the requested file path. If …\nas_path\nReturns a canonicalized string from the provided path …\nReturns a canonicalized string from the provided path …\nfrom_path\nReturns the last path component (file name or last …\nReturns the last modified time of the provided path in …\nReturns the parent path.\nDefines as path trait.\nConverts to a path reference.\nDefines as path trait.\nConverts from a path reference.\nContains the error value\nResult aliasing for project-wide error type.\nContains the success value")